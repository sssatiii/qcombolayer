# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QcomboLayerDialog
                                 A QGIS plugin
 Filler Layer Combo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-07-13
        git sha              : $Format:%H$
        copyright            : (C) 2025 by SIMONn
        email                : kittiwan.sati@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QShortcut
from qgis.PyQt.QtGui import QKeySequence
from qgis.PyQt.QtCore import Qt
from qgis.core import QgsProject, QgsExpression, QgsFeatureRequest, QgsVectorLayer, Qgis, QgsRectangle
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'QcomboLayer_dialog_base.ui'))


class QcomboLayerDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(QcomboLayerDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        self.setupUi(self)
        
        # Initialize plugin functionality
        self.setup_plugin_functionality()
        
        # Store filter configurations
        self.filter_configurations = []
        self.current_filtered_features = {}
        self.current_filter_index = 0
        self.primary_field_config = None  # Stores which config drives index navigation
        self.primary_field_index_log = []  # เก็บ log ของค่าทั้งหมดจาก primary field

    def setup_plugin_functionality(self):
        """Setup plugin functionality using UI components from Designer"""
        # เติมข้อมูล available layers
        self.populate_available_layers()
        
        # Setup hotkeys
        self.setup_hotkeys()
        
        # Fix dropdown hover issue with improved stylesheet
        self.action_combo.setStyleSheet("""
            QComboBox {
                background-color: white;
                border: 1px solid #cccccc;
                border-radius: 3px;
                padding: 5px 8px;
                font-size: 12px;
                color: #333333;
                min-height: 20px;
            }
            QComboBox:hover {
                border: 2px solid #0078d4;
                background-color: white;
            }
            QComboBox:focus {
                border: 2px solid #0078d4;
            }
            QComboBox::drop-down {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 20px;
                border-left: 1px solid #cccccc;
                background-color: #f8f8f8;
            }
            QComboBox::down-arrow {
                width: 10px;
                height: 10px;
                border: 2px solid #666666;
                border-top: none;
                border-right: none;
                transform: rotate(-45deg);
            }
            QComboBox QAbstractItemView {
                border: 1px solid #0078d4;
                selection-background-color: #0078d4;
                selection-color: white;
                background-color: white;
                color: #333333;
                font-size: 12px;
                padding: 4px;
            }
            QComboBox QAbstractItemView::item {
                padding: 6px;
                border-bottom: 1px solid #eeeeee;
            }
            QComboBox QAbstractItemView::item:hover {
                background-color: #e6f3ff;
                color: #333333;
            }
            QComboBox QAbstractItemView::item:selected {
                background-color: #0078d4;
                color: white;
            }
        """)
        
        # Store current filter index for Flex mode
        self.current_filter_index = 0
        
        # เชื่อมโยงสัญญาณ (signals)
        self.refresh_layers_button.clicked.connect(self.populate_available_layers)
        self.add_layer_button.clicked.connect(self.add_selected_layers)
        self.remove_layer_button.clicked.connect(self.remove_selected_layers)
        self.selected_layers_list.itemSelectionChanged.connect(self.update_fields_for_selected_layer)
        self.add_filter_button.clicked.connect(self.add_filter_configuration)
        self.set_primary_button.clicked.connect(self.set_as_primary_field)
        self.apply_button.clicked.connect(self.apply_all_filters)
        self.left_arrow.clicked.connect(self.decrease_value)
        self.right_arrow.clicked.connect(self.increase_value)
        self.zoom_to_features_button.clicked.connect(self.zoom_to_filtered_features)
        self.clear_filters_button.clicked.connect(self.clear_all_filters)
        self.configurations_list.itemDoubleClicked.connect(self.remove_filter_configuration)
        self.fetch_min_button.clicked.connect(self.fetch_min_value)
    
    def setup_hotkeys(self):
        """ตั้งค่า hotkeys สำหรับ navigation"""
        # D key = Increase
        self.shortcut_increase = QShortcut(QKeySequence(Qt.Key_D), self)
        self.shortcut_increase.activated.connect(self.increase_value)
        
        # A key = Decrease 
        self.shortcut_decrease = QShortcut(QKeySequence(Qt.Key_A), self)
        self.shortcut_decrease.activated.connect(self.decrease_value)
        
        # S key = Apply All Filters
        self.shortcut_apply = QShortcut(QKeySequence(Qt.Key_S), self)
        self.shortcut_apply.activated.connect(self.apply_all_filters)
        
        # Z key = Zoom to Features
        self.shortcut_zoom = QShortcut(QKeySequence(Qt.Key_Z), self)
        self.shortcut_zoom.activated.connect(self.zoom_to_filtered_features)
        
        print("Hotkeys setup: D = Increase, A = Decrease, S = Apply All Filters, Z = Zoom to Features")
    
    def populate_available_layers(self):
        """เติมข้อมูล available layers ใน list widget"""
        try:
            self.available_layers_list.clear()
            
            # ดึง vector layers จาก project
            layers = QgsProject.instance().mapLayers().values()
            vector_layers = [layer for layer in layers if isinstance(layer, QgsVectorLayer)]
            
            # เพิ่มชื่อ layer ใน list widget
            for layer in vector_layers:
                self.available_layers_list.addItem(layer.name())
                
        except Exception as e:
            print(f"Error populating available layers: {e}")
    
    def add_selected_layers(self):
        """เพิ่ม layers ที่เลือกไปยัง selected layers list"""
        try:
            selected_items = self.available_layers_list.selectedItems()
            for item in selected_items:
                layer_name = item.text()
                # ตรวจสอบว่ามี layer นี้ใน selected list แล้วหรือไม่
                existing_items = [self.selected_layers_list.item(i).text() 
                                for i in range(self.selected_layers_list.count())]
                if layer_name not in existing_items:
                    self.selected_layers_list.addItem(layer_name)
                    
        except Exception as e:
            print(f"Error adding selected layers: {e}")
    
    def remove_selected_layers(self):
        """ลบ layers ที่เลือกออกจาก selected layers list"""
        try:
            selected_items = self.selected_layers_list.selectedItems()
            for item in selected_items:
                row = self.selected_layers_list.row(item)
                self.selected_layers_list.takeItem(row)
                
        except Exception as e:
            print(f"Error removing selected layers: {e}")
    
    def update_fields_for_selected_layer(self):
        """อัพเดต fields list เมื่อเลือก layer ใน selected layers list"""
        try:
            self.fields_list.clear()
            
            current_item = self.selected_layers_list.currentItem()
            if not current_item:
                return
                
            layer_name = current_item.text()
            layers = QgsProject.instance().mapLayersByName(layer_name)
            if not layers:
                return
                
            layer = layers[0]
            if not isinstance(layer, QgsVectorLayer):
                return
            
            # ดึงฟิลด์จาก Layer
            fields = layer.fields()
            for field in fields:
                self.fields_list.addItem(field.name())
                
            # Set default selection to first field (minimum index)
            if self.fields_list.count() > 0:
                self.fields_list.setCurrentRow(0)
                
        except Exception as e:
            print(f"Error updating fields: {e}")
    
    def add_filter_configuration(self):
        """เพิ่ม filter configuration ใหม่ - รองรับหลาย fields ต่อ layer"""
        try:
            current_layer_item = self.selected_layers_list.currentItem()
            if not current_layer_item:
                iface.messageBar().pushMessage("Warning", "กรุณาเลือก layer ก่อน", level=Qgis.Warning)
                return
                
            layer_name = current_layer_item.text()
            
            # เปลี่ยนเป็นการเลือก field เดียว
            selected_field_item = self.fields_list.currentItem()
            if not selected_field_item:
                iface.messageBar().pushMessage("Warning", "กรุณาเลือก field", level=Qgis.Warning)
                return
                
            selected_field = selected_field_item.text()
                
            filter_value = self.filter_input.text().strip()
            if not filter_value:
                iface.messageBar().pushMessage("Warning", "กรุณาใส่ filter value", level=Qgis.Warning)
                return
                
            action_mode = self.action_combo.currentText()
            
            # ตรวจสอบว่ามี configuration สำหรับ layer นี้แล้วหรือไม่
            existing_config = None
            for config in self.filter_configurations:
                if config['layer_name'] == layer_name:
                    existing_config = config
                    break
            
            if existing_config:
                # เพิ่ม field ใหม่ใน config ที่มีอยู่
                if selected_field not in existing_config['fields']:
                    existing_config['fields'].append(selected_field)
                    existing_config['filter_values'][selected_field] = filter_value
                    existing_config['action_modes'][selected_field] = action_mode
                else:
                    # อัพเดทค่าใน field ที่มีอยู่
                    existing_config['filter_values'][selected_field] = filter_value
                    existing_config['action_modes'][selected_field] = action_mode
            else:
                # สร้าง configuration ใหม่
                config = {
                    'layer_name': layer_name,
                    'fields': [selected_field],
                    'filter_values': {selected_field: filter_value},
                    'action_modes': {selected_field: action_mode}
                }
                self.filter_configurations.append(config)
            
            # อัพเดทการแสดงผล configurations list
            self.update_configurations_display()
            
            # เคลียร์ form
            self.filter_input.clear()
            self.fields_list.clearSelection()
            
            iface.messageBar().pushMessage("Success", "เพิ่ม filter configuration แล้ว (กด Apply All Filters เพื่อใช้งาน)", level=Qgis.Success)
            
        except Exception as e:
            print(f"Error adding filter configuration: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาด: {str(e)}", level=Qgis.Critical)
    
    def remove_filter_configuration(self, item):
        """ลบ filter configuration เมื่อ double-click"""
        try:
            row = self.configurations_list.row(item)
            if 0 <= row < len(self.filter_configurations):
                self.filter_configurations.pop(row)
                self.configurations_list.takeItem(row)
                iface.messageBar().pushMessage("Info", "ลบ filter configuration แล้ว", level=Qgis.Info)
                
        except Exception as e:
            print(f"Error removing filter configuration: {e}")
    
    def apply_all_filters(self):
        """ประยุกต์ filter configurations ทั้งหมด (ใช้ exact value matching)"""
        try:
            if not self.filter_configurations:
                iface.messageBar().pushMessage("Warning", "ไม่มี filter configuration", level=Qgis.Warning)
                return
            
            # ตรวจสอบว่ามี Primary Field หรือไม่ (ถ้ามี Flex mode)
            has_flex = False
            for config in self.filter_configurations:
                if 'action_modes' in config:
                    for mode in config['action_modes'].values():
                        if mode.startswith("Flex"):
                            has_flex = True
                            break
                elif 'action_mode' in config and config['action_mode'].startswith("Flex"):
                    has_flex = True
                    break
            
            if has_flex and not self.primary_field_config:
                iface.messageBar().pushMessage("Warning", 
                    "มี Flex mode configurations - กรุณา Set Primary Field ก่อน", 
                    level=Qgis.Warning)
                return
            
            self.current_filtered_features.clear()
            total_features = 0
            
            # ไม่รีเซ็ต filter index เมื่อ apply filters ใหม่
            # self.current_filter_index = 0
            
            for config in self.filter_configurations:
                layer_name = config['layer_name']
                fields = config['fields']
                
                # รองรับทั้ง format เดิมและใหม่
                if 'filter_values' in config:
                    # รูปแบบใหม่ - หลาย fields ต่อ layer
                    filter_values = config['filter_values']
                    action_modes = config['action_modes']
                else:
                    # รูปแบบเดิม - compatibility
                    filter_values = {fields[0]: config['filter_value']}
                    action_modes = {fields[0]: config['action_mode']}
                
                # ดึง layer
                layers = QgsProject.instance().mapLayersByName(layer_name)
                if not layers:
                    continue
                    
                layer = layers[0]
                
                # สร้าง expression สำหรับ exact value matching
                # ใช้ AND สำหรับหลาย fields ใน layer เดียวกัน
                expressions = []
                for field in fields:
                    filter_value = filter_values.get(field, '')
                    if filter_value:
                        expressions.append(f'"{field}" = \'{filter_value}\'')
                
                if not expressions:
                    continue
                
                expr_string = ' AND '.join(expressions)
                expr = QgsExpression(expr_string)
                
                if not expr.isValid():
                    iface.messageBar().pushMessage("Error", f"Expression ไม่ถูกต้อง: {expr.evalErrorString()}", level=Qgis.Critical)
                    continue
                
                request = QgsFeatureRequest(expr)
                features = list(layer.getFeatures(request))
                
                if features:
                    # สร้างข้อมูลสำหรับ current_filtered_features
                    # ใช้ข้อมูลจาก primary field หรือ field แรกสำหรับ compatibility
                    primary_field = fields[0] if fields else ''
                    primary_filter_value = filter_values.get(primary_field, '') if primary_field else ''
                    primary_action_mode = action_modes.get(primary_field, 'Fix') if primary_field else 'Fix'
                    
                    self.current_filtered_features[layer_name] = {
                        'layer': layer,
                        'features': features,
                        'fields': fields,
                        'filter_value': primary_filter_value,
                        'action_mode': primary_action_mode,
                        'filter_values': filter_values,
                        'action_modes': action_modes
                    }
                    total_features += len(features)
                    
                    # กรอง layer (ทั้ง Fix และ Flex mode)
                    layer.setSubsetString(expr_string)
                    
                    values_str = ', '.join([f"{k}='{v}'" for k, v in filter_values.items()])
                    print(f"Layer {layer_name}: Found {len(features)} features with {values_str}")
                else:
                    values_str = ', '.join([f"{k}='{v}'" for k, v in filter_values.items()])
                    print(f"Layer {layer_name}: No features found with {values_str}")
            
            iface.mapCanvas().refresh()
            
            # แสดงข้อมูลเพิ่มเติมสำหรับ Flex mode และ Primary Field
            flex_count = 0
            for config in self.filter_configurations:
                if 'action_modes' in config:
                    # รูปแบบใหม่
                    flex_count += len([mode for mode in config['action_modes'].values() if mode.startswith("Flex")])
                else:
                    # รูปแบบเดิม
                    if config.get('action_mode', '').startswith("Flex"):
                        flex_count += 1
            
            primary_info = ""
            if self.primary_field_config:
                primary_info = f" (Primary: {self.primary_field_config['layer_name']}.{self.primary_field_config['field_name']}, Index: {self.current_filter_index})"
            
            if flex_count > 0:
                iface.messageBar().pushMessage("Success", 
                    f"Apply Filter สำเร็จ: พบ {total_features} features{primary_info} (ใช้ Arrow buttons สำหรับ Flex mode)", 
                    level=Qgis.Success)
            else:
                iface.messageBar().pushMessage("Success", f"Apply Filter สำเร็จ: พบ {total_features} features{primary_info}", level=Qgis.Success)
            
        except Exception as e:
            print(f"Error applying filters: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาด: {str(e)}", level=Qgis.Critical)
    
    def increase_value(self):
        """เพิ่ม index สำหรับ Flex mode (right arrow = index + 1)"""
        self.modify_filter_index(1)

    def decrease_value(self):
        """ลด index สำหรับ Flex mode (left arrow = index - 1)"""
        self.modify_filter_index(-1)

    def modify_filter_index(self, increment):
        """แก้ไข filter index โดยใช้ Index Log ที่เก็บไว้"""
        try:
            # ตรวจสอบว่ามี Primary Field และ Index Log หรือไม่
            if not self.primary_field_config or not self.primary_field_index_log:
                iface.messageBar().pushMessage("Warning", "กรุณา Fetch หรือ Set Primary Field ก่อน", level=Qgis.Warning)
                return

            # หา Flex configurations ที่รองรับทั้งรูปแบบเดิมและใหม่
            flex_configs = []
            for config in self.filter_configurations:
                has_flex = False
                
                if 'action_modes' in config:
                    # รูปแบบใหม่ - เช็คว่ามี field ไหนเป็น Flex หรือไม่
                    for mode in config['action_modes'].values():
                        if mode.startswith("Flex"):
                            has_flex = True
                            break
                elif 'action_mode' in config:
                    # รูปแบบเดิม
                    if config['action_mode'].startswith("Flex"):
                        has_flex = True
                
                if has_flex:
                    flex_configs.append(config)
            
            if not flex_configs:
                iface.messageBar().pushMessage("Warning", "ไม่มี Flex mode configurations", level=Qgis.Warning)
                return

            # คำนวณ index ใหม่
            new_index = self.current_filter_index + increment
            total_indices = len(self.primary_field_index_log)
            
            # ตรวจสอบ boundaries
            if new_index < 0:
                iface.messageBar().pushMessage("Warning", "ถึง index ต่ำสุดแล้ว (index 0)", level=Qgis.Warning)
                return
                
            if new_index >= total_indices:
                iface.messageBar().pushMessage("Warning", 
                    f"ถึง index สูงสุดแล้ว (index {total_indices-1})", 
                    level=Qgis.Warning)
                return

            # อัพเดท filter index
            self.current_filter_index = new_index
            
            # ดึงค่าใหม่จาก Index Log
            primary_new_value = self.primary_field_index_log[self.current_filter_index]
            if primary_new_value is None:
                iface.messageBar().pushMessage("Warning", f"ไม่พบข้อมูลใน Index Log ที่ index {self.current_filter_index}", level=Qgis.Warning)
                self.current_filter_index -= increment  # คืนค่า index
                return

            modified_layers = 0
            total_features = 0
            
            print(f"Using Index Log: Index {self.current_filter_index} = '{primary_new_value}'")
            
            # อัพเดททุก Flex configurations โดยใช้ค่าจาก Index Log
            for config in flex_configs:
                layer_name = config['layer_name']
                fields = config['fields']
                
                # ดึง layer
                layers = QgsProject.instance().mapLayersByName(layer_name)
                if not layers:
                    continue
                    
                layer = layers[0]
                
                # ใช้ค่าจาก Primary Field Index Log สำหรับทุก layer
                new_filter_value = primary_new_value
                
                # อัพเดทค่าใน configuration
                if 'filter_values' in config:
                    # รูปแบบใหม่ - อัพเดทเฉพาะ fields ที่เป็น Flex
                    for field in fields:
                        if config['action_modes'].get(field, '').startswith("Flex"):
                            config['filter_values'][field] = new_filter_value
                else:
                    # รูปแบบเดิม
                    config['filter_value'] = new_filter_value
                
                # สร้าง expression ใหม่
                expressions = []
                if 'filter_values' in config:
                    # รูปแบบใหม่
                    for field in fields:
                        filter_value = config['filter_values'].get(field, '')
                        if filter_value:
                            expressions.append(f'"{field}" = \'{filter_value}\'')
                else:
                    # รูปแบบเดิม
                    for field in fields:
                        expressions.append(f'"{field}" = \'{new_filter_value}\'')
                
                if not expressions:
                    continue
                
                expr_string = ' AND '.join(expressions)
                expr = QgsExpression(expr_string)
                
                if not expr.isValid():
                    print(f"Invalid expression for {layer_name}: {expr_string}")
                    continue
                
                # ค้นหา features ใหม่
                request = QgsFeatureRequest(expr)
                features = list(layer.getFeatures(request))
                
                # อัพเดท current_filtered_features
                if 'filter_values' in config:
                    # รูปแบบใหม่
                    primary_field = fields[0] if fields else ''
                    primary_filter_value = config['filter_values'].get(primary_field, '')
                    primary_action_mode = config['action_modes'].get(primary_field, 'Fix')
                    
                    self.current_filtered_features[layer_name] = {
                        'layer': layer,
                        'features': features,
                        'fields': fields,
                        'filter_value': primary_filter_value,
                        'action_mode': primary_action_mode,
                        'filter_values': config['filter_values'],
                        'action_modes': config['action_modes']
                    }
                else:
                    # รูปแบบเดิม
                    self.current_filtered_features[layer_name] = {
                        'layer': layer,
                        'features': features,
                        'fields': fields,
                        'filter_value': new_filter_value,
                        'action_mode': config['action_mode']
                    }
                
                # อัพเดท layer filter
                layer.setSubsetString(expr_string)
                total_features += len(features)
                modified_layers += 1
                
                print(f"Layer {layer_name}: Updated to index {self.current_filter_index}, value '{new_filter_value}', found {len(features)} features")

            if modified_layers > 0:
                iface.mapCanvas().refresh()
                
                # อัพเดท configurations list display
                self.update_configurations_display()
                
                direction = "เพิ่ม" if increment > 0 else "ลด"
                iface.messageBar().pushMessage("Success", 
                    f"{direction} index เป็น {self.current_filter_index}: ค่า '{primary_new_value}' → พบ {total_features} features ใน {modified_layers} layers", 
                    level=Qgis.Success)
            else:
                iface.messageBar().pushMessage("Warning", f"ไม่พบข้อมูลที่ค่า '{primary_new_value}' (index {self.current_filter_index})", level=Qgis.Warning)
                # คืนค่า index กลับ
                self.current_filter_index -= increment
                
        except Exception as e:
            print(f"Error in modify_filter_index: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาด: {str(e)}", level=Qgis.Critical)
            # คืนค่า index กลับเมื่อเกิด error
            try:
                self.current_filter_index -= increment
            except:
                pass

            if modified_layers > 0:
                iface.mapCanvas().refresh()
                
                # อัพเดท configurations list display
                self.update_configurations_display()
                
                direction = "เพิ่ม" if increment > 0 else "ลด"
                iface.messageBar().pushMessage("Success", 
                    f"{direction} index เป็น {self.current_filter_index}: ค่า '{primary_new_value}' → พบ {total_features} features ใน {modified_layers} layers", 
                    level=Qgis.Success)
            else:
                iface.messageBar().pushMessage("Warning", f"ไม่พบข้อมูลที่ค่า '{primary_new_value}' (index {self.current_filter_index})", level=Qgis.Warning)
                # คืนค่า index กลับ
                self.current_filter_index -= increment
                
        except Exception as e:
            print(f"Error in modify_filter_index: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาด: {str(e)}", level=Qgis.Critical)
            
    def get_value_at_index(self, layer, fields, index):
        """หาค่าที่ index ที่กำหนดจาก field โดยใช้ row number (0-based indexing)"""
        try:
            for field_name in fields:
                # ดึงค่าทั้งหมดจาก field นี้ตามลำดับ feature (row number)
                values = []
                for feature in layer.getFeatures():
                    value = feature[field_name]
                    values.append(value)
                
                # ตรวจสอบว่า index อยู่ในช่วงที่ถูกต้อง
                if 0 <= index < len(values):
                    return str(values[index]) if values[index] is not None else None
            
            return None
            
        except Exception as e:
            print(f"Error getting value at index: {e}")
            return None
            
    def get_total_rows_for_field(self, layer, field_name):
        """หาจำนวน rows ทั้งหมดใน field"""
        try:
            count = 0
            for feature in layer.getFeatures():
                if feature[field_name] is not None:
                    count += 1
            return count
        except Exception as e:
            print(f"Error getting total rows: {e}")
            return 0
            
    def update_configurations_display(self):
        """อัพเดทการแสดงผล configurations list - รองรับหลาย fields ต่อ layer"""
        try:
            self.configurations_list.clear()
            
            for config in self.filter_configurations:
                layer_name = config['layer_name']
                fields = config['fields']
                
                # สร้างข้อความแสดง fields และ values
                field_infos = []
                for field in fields:
                    if 'filter_values' in config:
                        # รูปแบบใหม่ - มี filter_values และ action_modes
                        filter_value = config['filter_values'].get(field, 'N/A')
                        action_mode = config['action_modes'].get(field, 'N/A')
                    else:
                        # รูปแบบเดิม - compatibility
                        filter_value = config.get('filter_value', 'N/A')
                        action_mode = config.get('action_mode', 'N/A')
                    
                    # เช็คว่าเป็น Primary Field หรือไม่
                    primary_marker = ""
                    if (self.primary_field_config and 
                        self.primary_field_config['layer_name'] == layer_name and 
                        self.primary_field_config['field_name'] == field):
                        primary_marker = " [PRIMARY]"
                    
                    field_infos.append(f"{field}: {filter_value} ({action_mode}){primary_marker}")
                
                # รวม field infos
                fields_text = " AND ".join(field_infos)
                config_text = f"{layer_name} | {fields_text}"
                self.configurations_list.addItem(config_text)
                
        except Exception as e:
            print(f"Error updating configurations display: {e}")
    
    def zoom_to_filtered_features(self):
        """ซูมไปยัง features ทั้งหมดที่ถูกกรอง - อ่านจาก layer โดยตรง"""
        try:
            if not self.filter_configurations:
                iface.messageBar().pushMessage("Warning", "ไม่มี filter configuration", level=Qgis.Warning)
                return
            
            # Auto-apply filters before zooming เพื่อให้ได้ข้อมูลล่าสุด
            self.apply_all_filters()
            
            all_geometries = []
            total_features = 0
            layers_count = 0
            
            # วนลูปผ่าน filter configurations และอ่าน geometry จาก layer โดยตรง
            for config in self.filter_configurations:
                layer_name = config['layer_name']
                fields = config['fields']
                
                # รองรับทั้ง format เดิมและใหม่
                if 'filter_values' in config:
                    # รูปแบบใหม่ - หลาย fields ต่อ layer
                    filter_values = config['filter_values']
                else:
                    # รูปแบบเดิม - compatibility
                    filter_values = {fields[0]: config['filter_value']}
                
                # ดึง layer
                layers = QgsProject.instance().mapLayersByName(layer_name)
                if not layers:
                    continue
                    
                layer = layers[0]
                
                # สร้าง expression สำหรับ exact value matching
                expressions = []
                for field in fields:
                    filter_value = filter_values.get(field, '')
                    if filter_value:
                        expressions.append(f'"{field}" = \'{filter_value}\'')
                
                if not expressions:
                    continue
                
                expr_string = ' AND '.join(expressions)
                expr = QgsExpression(expr_string)
                
                if not expr.isValid():
                    print(f"Invalid expression for {layer_name}: {expr_string}")
                    continue
                
                # ค้นหา features และดึง geometry โดยตรง
                request = QgsFeatureRequest(expr)
                features = list(layer.getFeatures(request))
                
                if features:
                    layers_count += 1
                    layer_features = 0
                    
                    for feature in features:
                        if feature.hasGeometry() and not feature.geometry().isEmpty():
                            all_geometries.append(feature.geometry())
                            layer_features += 1
                    
                    total_features += layer_features
                    print(f"Layer {layer_name}: {layer_features} features with geometry (from {len(features)} total features)")
                else:
                    values_str = ', '.join([f"{k}='{v}'" for k, v in filter_values.items()])
                    print(f"Layer {layer_name}: No features found with {values_str}")
            
            if all_geometries:
                self._perform_zoom(all_geometries, f"{layers_count} Layers")
                iface.messageBar().pushMessage("Success", 
                    f"Zoom ไปยัง {total_features} features จาก {layers_count} layers แล้ว", 
                    level=Qgis.Success)
            else:
                iface.messageBar().pushMessage("Warning", 
                    f"ไม่พบ geometry ที่ใช้ได้สำหรับ zoom จาก {layers_count} layers", 
                    level=Qgis.Warning)
                
        except Exception as e:
            print(f"Error zooming to features: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาดในการ zoom: {str(e)}", level=Qgis.Critical)
    
    def _perform_zoom(self, geometries, zoom_target):
        """ทำการ zoom ไปยัง geometries ที่กำหนด"""
        try:
            if not geometries:
                iface.messageBar().pushMessage("Warning", "ไม่มี geometry สำหรับ zoom", level=Qgis.Warning)
                return
                
            # คำนวณ bounding box ของ features ทั้งหมด
            min_x = min_y = float('inf')
            max_x = max_y = float('-inf')
            
            for geom in geometries:
                bbox = geom.boundingBox()
                min_x = min(min_x, bbox.xMinimum())
                min_y = min(min_y, bbox.yMinimum())
                max_x = max(max_x, bbox.xMaximum())
                max_y = max(max_y, bbox.yMaximum())
            
            # สร้าง QgsRectangle และ zoom
            extent = QgsRectangle(min_x, min_y, max_x, max_y)
            
            # เพิ่ม buffer 3 เท่า (zoom out มากขึ้น)
            extent.scale(5.0)
            
            iface.mapCanvas().setExtent(extent)
            iface.mapCanvas().refresh()
            
            print(f"Zoomed to {len(geometries)} geometries from {zoom_target}")
            
        except Exception as e:
            print(f"Error in _perform_zoom: {e}")
            raise
    
    def clear_all_filters(self):
        """เคลียร์ filters และ configurations ทั้งหมด"""
        try:
            # เคลียร์ subset strings ของ layers
            for layer_name, data in self.current_filtered_features.items():
                layer = data['layer']
                layer.setSubsetString("")
            
            # เคลียร์ data structures
            self.filter_configurations.clear()
            self.current_filtered_features.clear()
            self.current_filter_index = 0
            self.primary_field_config = None
            self.primary_field_index_log = []  # เคลียร์ index log
            
            # เคลียร์ UI
            self.configurations_list.clear()
            self.selected_layers_list.clear()
            self.fields_list.clear()
            self.filter_input.clear()
            
            iface.mapCanvas().refresh()
            iface.messageBar().pushMessage("Success", "เคลียร์ filters, primary field และ index log ทั้งหมดแล้ว", level=Qgis.Success)
            
        except Exception as e:
            print(f"Error clearing filters: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาดในการเคลียร์: {str(e)}", level=Qgis.Critical)
    
    def fetch_min_value(self):
        """ดึงค่าที่ index 0 และสร้าง index log จาก field ที่เลือก"""
        try:
            current_layer_item = self.selected_layers_list.currentItem()
            if not current_layer_item:
                iface.messageBar().pushMessage("Warning", "กรุณาเลือก layer ก่อน", level=Qgis.Warning)
                return
                
            layer_name = current_layer_item.text()
            
            selected_field_item = self.fields_list.currentItem()
            if not selected_field_item:
                iface.messageBar().pushMessage("Warning", "กรุณาเลือก field ก่อน", level=Qgis.Warning)
                return
                
            field_name = selected_field_item.text()
            
            # ดึง layer
            layers = QgsProject.instance().mapLayersByName(layer_name)
            if not layers:
                return
                
            layer = layers[0]
            
            # สร้าง index log (เก็บค่าทั้งหมดจาก field ตามลำดับ row)
            self.primary_field_index_log = []
            for feature in layer.getFeatures():
                value = feature[field_name]
                self.primary_field_index_log.append(str(value) if value is not None else None)
            
            # ดึงค่าที่ index 0 (แถวแรก)
            if len(self.primary_field_index_log) > 0:
                first_value = self.primary_field_index_log[0]
                total_rows = len(self.primary_field_index_log)
                
                if first_value is not None:
                    self.filter_input.setText(str(first_value))
                    
                    # รีเซ็ต current_filter_index เป็น 0
                    self.current_filter_index = 0
                    
                    iface.messageBar().pushMessage("Success", 
                        f"Fetch สำเร็จ: {first_value} (สร้าง Index Log {total_rows} แถว) - กด Set Primary เพื่อตั้งเป็น Primary Field", 
                        level=Qgis.Success)
                    
                    # แสดง sample ของ index log
                    sample_log = self.primary_field_index_log[:5]  # แสดง 5 ตัวแรก
                    print(f"Index Log Sample: {sample_log}")
                    print(f"Reset current_filter_index to 0")
                else:
                    iface.messageBar().pushMessage("Warning", "ไม่พบข้อมูลใน field นี้", level=Qgis.Warning)
            else:
                iface.messageBar().pushMessage("Warning", "ไม่พบข้อมูลใน field นี้", level=Qgis.Warning)
                
        except Exception as e:
            print(f"Error fetching min value: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาด: {str(e)}", level=Qgis.Critical)
    
    def set_as_primary_field(self):
        """ตั้งค่า field ปัจจุบันเป็น primary field และสร้าง index log"""
        try:
            current_layer_item = self.selected_layers_list.currentItem()
            if not current_layer_item:
                iface.messageBar().pushMessage("Warning", "กรุณาเลือก layer ก่อน", level=Qgis.Warning)
                return
                
            layer_name = current_layer_item.text()
            
            selected_field_item = self.fields_list.currentItem()
            if not selected_field_item:
                iface.messageBar().pushMessage("Warning", "กรุณาเลือก field ก่อน", level=Qgis.Warning)
                return
                
            field_name = selected_field_item.text()
            
            # ดึง layer
            layers = QgsProject.instance().mapLayersByName(layer_name)
            if not layers:
                return
                
            layer = layers[0]
            
            # สร้าง index log สำหรับ primary field
            self.primary_field_index_log = []
            for feature in layer.getFeatures():
                value = feature[field_name]
                self.primary_field_index_log.append(str(value) if value is not None else None)
            
            # ตั้งเป็น primary field config
            self.primary_field_config = {
                'layer_name': layer_name,
                'field_name': field_name,
                'index_log': self.primary_field_index_log.copy()
            }
            
            # รีเซ็ต current_filter_index เป็น 0
            self.current_filter_index = 0
            
            total_rows = len(self.primary_field_index_log)
            iface.messageBar().pushMessage("Success", 
                f"ตั้ง {layer_name}.{field_name} เป็น Primary Field แล้ว ({total_rows} index)", 
                level=Qgis.Success)
            
            # อัพเดทการแสดงผล configurations
            self.update_configurations_display()
            
            # แสดง sample ของ index log
            sample_log = self.primary_field_index_log[:5]  # แสดง 5 ตัวแรก
            print(f"Primary Field Index Log Sample: {sample_log}")
            print(f"Reset current_filter_index to 0")
            
        except Exception as e:
            print(f"Error setting primary field: {e}")
            iface.messageBar().pushMessage("Error", f"เกิดข้อผิดพลาด: {str(e)}", level=Qgis.Critical)
